Estructura:
Selector{
	Valores o atributos
}

Selectores: Existen mas selectores, buscar en w3schools selectores css.

* es el selector universal, es decir que afecta a toda la pagina

tipo de etiqueta. Ejemplo h1. es el selector de tipo y afecta a todas las etiquetas del tipo seleccionado

.Codigo de la clase. es el selector por clases y afecta a todas las etiquetas pertenecientes a dicha clase, para definir la clase de una etiqueta se le agrega el atributo class y el nombre correspondiente

#ID. es el selector por ID que efecta a todas las etiquetas con ese ID (se recomienda usar uno diferente por cada etiqueta). Para definir un ID se agrega el atributo id="ID" a una etiqueta

[Atributo(sirve cualquier nombre)="cualquier cosa"]. Es el selector por atributos, por lo que sirve para crear atributos y agregarles cualquier caracteristica especifica

Clase contenedora Clase hija. es el selector por desendencia, sirve para modificar a las etiquetas que se encuentran dentro de otras sin afectar a etiquetas del mismo tipo que esten en una situacion diferente. La clase contenedora tambien puede ser un selector de clase sin el punto

Etiqueta: Hover. es el selector de pseudoclase y sirve para que se vean los cambios al pasar el mouse por encima de la etiqueta en la pagina web

Jerarquias de menor a mayor:

(elementos y pseudoelementos),(Clases, pseudoclases y atributos), (ID), (Estilos en linea) y (Important). este ultimo se declara agregando !important en los atributos de la etiqueta en css.

Metodologia Bem:

consiste en utilizar clases ordenadas, los nombres de las clases hijas seran el nombre de la clase padre seguide de dos _ (esto solo se utiliza para el primer hijo, para todos los siguientes solo se agrega un -), y en el caso de cambiar una etiqueta especifica se le agregan al final dos - y se le escribe cualquier cosa que las diferencie

Atributos:

font-size: Tamano;  sirve para modificar el tamano de la letra. Existen medidas fijas(cm,mm,px) y relativas "em" las relativas se rigen del tamano que tenga la caja contenedora,si la caja contenedora no determina el tamano este trabajo lo hace el navegador (generalmente lo establece como 16px), tambien existen para width y heigth las medidas vw(viewport width) y vh(viewport height), estos se refieren al porcentaje total de la pantalla, por lo que si se pone 100vw este cubrira el largo total de la misma 

font-family: Tipografia; sirve para cambiar la tipografia del texto

line-height: Tamano; sirve para definir la cantidad de espacio que van a ocupar las letras, este se mide desde la mitad y se aplica la mitad del tamano para arriba y la otra mitad para abajo

font-weight: Tamano; sirve para modificar el grosor de las letras, los cambios dependen de la tipografia, ya que algunas tienen muchos cambios segun la cantidad y otras solo poseen dos formas(normal y ancha)

background-color: color; sirve para cambiar el color del fondo, si se le coloca inherit, hereda el color de la caja que la contiene.

padding: tamano; es el espacio entre el texto y los bordes, si se coloca una sola medida esta afectara a todos los lados, si son la primera sera vertical y la otra horizontal, y si son 4 el orden es: arriba,derecha,abajo e izquierda. Tambien se pueden especificar escribiendo padding-(top,left,right,bottom)

box-sizing: border-box(sirve para que el tamano de la caja se mantenga igual a pesar de las modificaciones), content-box(sirve para que la caja se adapte al tamano de su contenido);

margin:tamano; sirve para definir el espacio entre todos los bordes de la caja hacia afuera (funciona igual que el padding), si se le coloca auto este se encarga de centrar el contenido de los bloques no posicionados

border-radius:Tamano; sirve para redondear los bordes de una caja.

border: Tamano Tipo(solid(es un borde solido),dashed(es un borde recortado),double(es un borde de dos lineas),groove(Tienes variaciones de color),inset(tiene dos colores, el principal y una variacion de ese), outset(igual que inset pero invertido), ridge(igual que groove pero al reves)) Color; sirve para modificar los bordes.

box-shadow: tamano eje x tamano eje y tamano del desenfoque tamano del borde color; sirve para crearle sombras a la caja, para mejorar el efecto se agrega una coma y se pegan todos los atributos(se puede hacer indefinidas veces)

tex-shadow: tamano eje x tamano eje y tamano del difuminado color; sirve para crearle sombras al texto, para mejorar el efecto se agrega una coma y se pegan todos los atributos(se puede hacer indefinidas veces)

transform: se le puede colocar rotate y entre (la cantidad de grados y la terminacion deg que es el tipo de unidad); esta funcion sirve para rotar una caja y todo su contenido

outline: Tamano Tipo Color; es igual que border, pero no ocupa espacio real, por lo que en algunos casos no se va a poder apreciar

position: tipo de posicion; sirve para modificar la posicion de una caja.{

relative; sirve para mover la posicion de una caja sin importar donde se encuentren las otras, usando top,left,right y bottom y un tamano, estas se van a mover hacia el lado opuesto. top tiene prioridad sobre bottom y left tiene prioridad sobre right.

absolute; sirve para eliminar el espacio reservado que tiene la caja por lo que las siguientes toman su lugar y todo se mueve, tambien permite mover la caja al igual que relative, tambien hace que si el tamano de la caja no esta definido esta se ajuste al texto,para moverlo se toma como referencia el viewport(tamano de la pagina) o la caja que lo contenga en caso de estar posicionado.

fixed; es igual que absolute, pero se queda en el lugar donde la pones a pesar de scrolear hacia abajo en la pagina por lo que siempre se va a ver. por ejemplo las publicidades en algunas paginas que aunque bajes mucho siempre las vas a ver

sticky; es una combinacion entre relative y fixed, por lo que ocupa espacio y no se superpone, pero puedes elegir cuando se mantiene pegada para que se vea aunque bajes.

}
z-index: Valor; sirve para declarar las prioridades en el eje z(profundidad), logrando superponer unas cajas sobre otras. para que funcione entre padres e hijos el hijo debe tener -1 y el padre no lo debe de tener definido.

opacity:valor del 0 al 1(0 es totalmente transparente y 1 es normal); sirve para hacer a una caja mas o menos transparente.

Display: Tipo; se usa para modificar el comportamiento de las cajas.{

block;ocupan toda la linea

inline;ocupan solo su espacio

inline-block;permite modificar el ancho y alto de una caja y colocar unas cajas al lado de otras, modificando su comportamiento original

table; otorga el comportamiento de una tabla

inline-table; otorga el comportamiento de una tabla en linea por lo que se adapta a su contenido

list-item; se comporta como una lista

table-cell; se comporta como uno de los cuadros interiores de una tabla

table-row; se comporta como la fila de una tabla

table-column; se comporta como la columna de una tabla; (las tablas ya no se usan)

flex; se le coloca al contenedor y solo afecta a los hijos directos, esto hace que por ejemplo dos cajas se encuentren en la misma altura sin importar el contenido de cada una adaptandose a lo ancho.
}

Propiedades del contenedor(flex):

flex-direction:row(sirve para que las cajas se adapten en filas, por defecto),column(las cajas se adaptan en columnas,cambiando la direccion del main axis),row-reverse(se invierte el orden de la fila, ya que se invierte el main axis),column-reverse(invierte el orden de las columnas, de abajo para arriba);

flex-wrap:wrap(hace que se mantenga el tamano definido de las cajas,haciendo que cambien de linea cuando sea necesario o que ocupen todo el espacio de su linea),wrap-reverse(hace que las cajas mantengan su tamano y cuando sea necesario se muevan hacia la fila de arriba),no-wrap(valor por defecto)

justify-content:center(sirve para centrar el contenido),space-around(coloca todas las cajas con espacios iguales entre ellas excepto los bordes que son la mitad,igual que el margin auto),space-between(deja la mayor cantidad de espacio posible entre cajas), space-evenly(deja la misma cantidad de espacio entre las cajas y sus bordes);sirve para alinear en el main axis

flex-flow:flex-direction flex-wrap; es un atajo para definir los dos atributos en uno solo

align-items:stretch(propiedad por defecto),flex-start(coloca las cajas en el inicio del cross axis, es decir arriba),center(se centran las cajas verticalmente),flex-end(se colocan las cajas en el final del cross axis,es decir abajo),baseline(se suele utilizar con un wrap-reverse para que las cajas se encuentren abajo y vayan subiendo) ;sirve para alinear en el cross axis, cuando las cajas ocupan una sola linea.

align-content:mismas propiedades que el align-items;sirve para alinear en el cross axis, cuando las cajas ocupan mas de una linea.

Propiedades de los flex-items:

align-self:mismas propiedades de align-items;sirve para alinear una caja flexible de forma individual.Las cajas flexibles son hijos de contenedores con el display:flex;.

flex-grow:numero(indica las partes del espacio que se llevara una caja, en caso de asignarlo de forma individual a varias cajas);sirve para asignarle a las cajas partes iguales del espacio sobrante en su linea,por lo que se estiraran siempre que la pagina sea mas grande y se esconderan si se hace muy pequena,a menos que se coloque un wrap, si se le asigna a una sola caja el espacio sobrante se le otorgara a ella, por lo que no habra nu=inguna reparticion.

flex-basis:width;sirve para cambiar el width de una caja flexible, esta funcion tiene mas importancia de especificidad que la declaracion del width normal.

flex-shrink:numero;sirve para definir que cantidad de espacio va a ceder cada caja cuando la pagina se haga mas pequena.es lo opuesto del flex-grow.

flex:flex-grow flex-shrink flex-basis; sirve como un atajo para declarar dichos atributos. con que se le pase un parametro es suficiente.

Order:numero ;sirve para ordenar los elementos en la direccion que apunta el main axis,mientras mayor sea el valor, mas cerca estara del final del eje.

grid:tipo;sirve para crear grillas, son parecidas a las tablas.item(es el elemento que se coloca dentro, puede ocupar cualquier cantidad de espacio),cell(es una de las divisiones del grid,un solo cuadro),tracks(se divide en columns y rows,son el numero total de estos que hay y se usa para referirse a dichas partes),areas(son partes definidas por el desarrollador para referirse a un espacio en especifico),line(son las lineas divisorias en el grid(row line y column line)).

Propiedades del grid container:

grid-template-rows:medidas;se le coloca una medida por cada fila que se quiera colocar,por ejemplo para tres filas se colocaria grid-template-rows:100px 100px 100px, para abreviar esto se puede colocar repeat(cantidad,medidas),que en este caso seria repeat(3,100px); si se declaran sin el repeat, se les puede colocar nombre a las lineas,colocando el nombre de la linea sobre la medida correspondiente a la celda contigua.

grid-template-columns:medidad;es igual que las rows pero con columnas.tambien se puede usar el repeat.

grid-template-area:"se coloca el nombre de lo que se quiere colocar",por cada vez que se coloque sera una columna nueva,y cada parte nueva con "" sera una nueva fila.
Ejemplo: "header header header"
         "main main main"
         "footer footer footer"

Para establecer el nombre de cada area para los elementos se les coloca como un atributo dentro de sus especificaciones en css como elemento individual grid-area: nombre. Para definir el tamano se hace con las funciones grid-template-rows y grid-template-columns.

fr;es un tipo de medida que funciona como el flex-grow pero para los grid, haciendo que se reparta el espacio sobrante(se suele colocar solo para las columnas).

grid-row-gap:medida; sirve para colocar un margen que separe las celdas entre ellas en las filas.

grid-column-gap:medida; sirve para colocar un margen que separe las celdas entre ellas en las columnas.

grid-gap:medida;sirve para colocar un margen que separe las celdas entre ellas en las filas y las columnas.

grid-auto-rows:medida;sirve para definir el tamano de las celdad en las filas implicitas, que son las que no se declaran pero aparecen si hay mas cajas que celdas declaradas.

grid-auto-columns:medida;sirve para definir el tamano de las celdad en las columnas implicitas, que son las que no se declaran pero aparecen si hay mas cajas que celdas declaradas.

grid-auto-flow:column(sirve para que se creen columnas implicitas en lugar de filas, por lo que cuando sobren elementos se agregaran hacia el lado derecho en lugar de hacia abajo),dense(se rellenan los espacios vacios con el elemento mas cercano que sea del mismo tamano);

min-content.sirve para que se muestre el contenido de una celda de la forma mas minimizada posible.

max-content.sirve para que se muestre el contenido de una celda de la forma mas maximizada posible.

minmax(medida minima, medida maxima).sirve para definir el intervalo de medidas de las celdas.

auto-fill.sirve para crear filas o columnas de forma dinamica segun el tamano de la grilla, se suele colocar como el parametro de cantidad cuando se definen las filas o las columnas.

auto-fit.escala el tamano de las celdas restantes conforme aunmenta o disminuye el tamano de la grilla.

justify-items:stretch(valor por defecto),center(sirve para centrar el contenido),start(sirve para colocar el contenido en el inicio de su celda correspondiente),end(sirve para colocar el contenido en el final de su celda correspondiente),tambien tiene las tres funciones de space de flex;sirve para modificar cada celda por separado horizontalmente.

align-items:mismas funciones que justify-items;sirve para modificar cada celda por separado verticalmente.

justify-content:mismas funciones que justify-items menos las de space;sirve para mover todo el contenido de la grilla horizontalmente(las columnas), siempre y cuando no sea flexible y sobre espacio.

align-content:mismas funciones que justify-items menos las de space;sirve para mover todo el contenido de la grilla verticalmente(las filas), siempre y cuando no sea flexible y sobre espacio.


Propiedades de los grid-items:

grid-row: fila inicial / fila a la que se quiere llegar(si se le coloca span antes del valor, no se contaran las lineas sino las filas como tal);sirve para agrandar una celda segun las filas.

grid-column: columna inicial / columna a la que se quiere llegar(si se le coloca span antes del valor, no se contaran las lineas sino las columnas como tal);sirve para agrandar una celda segun las columnas.

align-self:start,center,end;sirve para alinear cada item de forma individual verticalmente segun el espacio general que permita la grilla

justify-self:start,center,end;sirve para alinear cada item de forma individual horizontalmente segun el espacio general que permita la grilla

place-self:align-self justify-self;es un atajo para definir las dos funciones en una sola.

order:numero;sirve para ordenar los elementos, mientras mayor sea el numero el elemento se posicionara en un espacio mas cerca del final, si posee el mayor valor entre todos ira directamente a la posicion final.

overflow(te puedes referir al eje x o y):Tipo; auto(sirve para que la caja detecte si el texto sobrepasa su tamano y en caso de que lo haga se pueda scrollear localmente dentro de la caja),scroll(hace lo mismo que auto, pero le da igual que el texto sobrepase o no,siempre va a aparecer la barra del scroll),hidden(sirve para ocultar la barra del scroll, tambien sirve para esconder las parte que sobresalgan de por ejemplo una imagen)

float:algun lado; mueve el texto o imagen hacia el lado indicado, adaptando todo lo demas a su nueva posicion, por ejemplo si en una caja tienes texto y una imagen y mueves la imagen hacia un lado el texto se adaptara a esto y quedara esteticamente bien

Pseudo-elementos:

::first-line; funciona en todos los tipos de caja menos inline, sirve para modificar la primera linea de un texto.

::firts-letter;funciona en todos los tipos de caja menos inline, sirve para modificar la primera letra de un texto.

::placeholder; sirve para modificar lo que esta escrito previamente en un input, esto se habilita en el input cuando se declara como un atributo en la forma, placeholder:"Lo que quieres que tenga el input por defecto".

::selection; sirve para modificar el como se ve cuando se selecciona un texto con el mouse, se comporta como un elemento en linea en el cual se pueden modificar pocas propiedades.

::before; se le tiene que agregar el atributo content:"lo que se quiera escribir",sirve para colocar algo antes de otro elemento o texto.

::after; lo mismo que before pero en lugar de antes se coloca despues. 

:firts-child. Selecciona el primero en una lista de muchos elementos.

:last-child.Selecciona el ultimo en una lista de varios elementos.

:nth-child(numero del elemento).sirve para declarar que elemento se quiere modificar de una lista.

Pseudo-clases:

:hover; sirve para modificar como se ve una caja o elemento cuando se le pasa el mouse por encima, se le puede agregar a su contenedor el atributo transition para modificar el tiempo que dura la transicion de las modificaciones del hover, se coloca el tiempo al lado de cada atributo que cambie separado por una ",". Ej: transition: height 1s,width 1s,color 1.5s; o se puede poner transition:all 1s; para que todo tenga la misma duracion(no se recomienda usar all).

:link; sirve para modificar los links que nunca se han visitado(por ejemplo cambiandoles el color) y despues de visitarlos vuelven a su estado normal

:visited; hace lo mismo que link pero con las paginas ya visitadas, por lo que usando las dos se puede diferenciar cuando una persona ya visito dicha pagina y cuando no.

:active; sirve para modificar una caja o elemento, pero estos cambios solo se veran cuando se le haga click a ese elemento.

:focus;sirve para modificar un input, los cambios se observan cuando se enfoca para escribir en el,y se mantendran hasta que termines de escribir o hagas click en otro lugar para dejar de enfocarlo

:lang; sirve para modificar un elemento o texto que se encuentre en un lenguaje especifico, es una funcion por lo que hay que pasarle un parametro(abreviacion del lenguaje), la pagina no detecta el lenguaje automaticamente por lo que se tiene que declarar en html cuando se escribe la etiquete, esto se hace con el atributo lang:"abreviacion del lenguaje". (esta funcion casi no se usa)


object-fit:Tipo;contain(sirve para que una imagen se adapte a su correcta resolucion sin importar el tamano de la caja,dejando vacio el espacio que no usa),cover(la imagen se ajusta al contenedor, recortando partes de la misma para mantener una correcta resolucion),none(coloca la resolucion por defecto de la imagen sin importar el tamano de su contenedor),scale-down(se queda con la resolucion mas pequena entre contain y none)

object-position:Se puede colocar algun lado(rigth,top,etc) o alguna medida(si la medida es positiva se esconde la imagen hacia la derecha y si es negativa hacia la izquierda)

cursor:tipo de cursor;pointer(es el cursor de la mano),row-resize(es el cursor que sirve para modificar el tamano de algo),copy(para copiar),progress(es el cursor de carga), https://uniwebsidad.com/libros/css/capitulo-13/personalizar-el-cursor (link con todos los cursores).

rgb(red,green,blue); se combinan los colores colocandoles valores del 0 hasta el 255.

rgba(red,green,blue,opacity); se combinan los colores colocandoles valores del 0 hasta el 255.la opacidad va del 0 al 1.

responsive design: para adaptar la resolucion a la de otro dispositivo se agrega la meta etiqueta <meta name="viewport" content="width=device-width, initial-scale=1.0">

text-align:center(o cualquier otro lado);sirve para centrar textos o iconos.

text-decoration:none;sirve para quitarle la decoracion al texto, como las lineas que salen debajo de los links.

calc(tamano (+,-,*,/)Tamano); sirve para calcular un tamano especifico durante la declaracion de un atrubuto

resize:none; se le coloca a los text area para que no puedan ser estirados por el usuario.

linear-gradient(to (right,top,etc),primer color,segundo color );sirve para crear variaciones de colores hacia un lado en especifico(degradados), se suele utilizar con transparent como primer color en los inputs y textareas.


Responsive design:

@media screen and (condicion){
	codigo
} esto funciona como un condicional que ejecuta todo lo que se encuentra dentro de el si se pasa el limite de tamano establecido (esto se suele utilizar para adaptar a otras resoluciones como tablets o telefonos), se pueden usar los operadores or y and.

transition-property:background(es una transicion que solo afecta al fondo),

transition-duration:numero segundos,ejemplo: 1s;sirve para definir la duracion de una transicion.

transition-delay:numero segundos;sirve para definir el tiempo que va a tardar en iniciar la transicion(se usa para retrasarla).

transition-timing-function:linear(todos los cambios de la transicion se ven a la misma velocidad),ease(propiedad por defecto),ease-in(comienza despacio y va aumentando de velocidad),ease-out(empieza rapido pero va disminuyendo),ease-in-out(empieza despacio, acelera en la mitad y termina despacio);sirven para cambiar la velocidad a la que ocurre cada parte de la transicion.


Animaciones:

Existen dos formas de declarar una animacion: con from y to(solo se pueden declarar dos momentos de la animacion) o con porcentajes(se pueden definir tantos cambios como se deseen).

@keyframes Nombre de la animacion{
    
    from o 0%{
        Donde empieza la caja o lo que se quiere animar
    }
    50%{
        Cualquier cosa    
    }
    to 0 100%{
        Donde termina
    }
} Para colocar la animacion se le debe agregar al elemento los atributos: animation-name:nombre de la animacion y animation-duration:tantos segundos.

animation-timing-function:Funciona igual que transition-timing-function, pero ademas tiene la funcion de cubic-bezier(x1,y1 ,x2,y2), para esto sirve la pagina cubic bezier generator.

animation-iteration-count:numero;sirve para definir la cantidad de veces que se va a repetir una animacion, se le puede colocar el valor infinite para que se repita infinitamente.

animation-direction:normal(valor por defecto),reverse(invierte la animacion,comienza en el 100% y termina en el 0%),alternate(sirve para que la animacion se haga ida y vuelta),alternate-reverse(es igual que alternate, pero empezando desde el otro lado);sirve para cambiar la direccion de la animacion.

animation-fill-mode:none(sirve para que todo vuelva a la normalidad cuando la animacion termine),backwards(no se), forwards(hace que el elemento se mantenga igual que en el ultimo momento de la animacion),both(sirve como forwards y ademas empieza el elemento como indica la animacion al principio, por lo que no hay que esperar para que suceda el primer cambio).

Transformaciones:

transform:translateX(medida)(sirve para transportar un elemento en el eje x,si se usan porcentajes estos seran medidos por el tamano del objeto que se esta moviendo),translateY(lo mismo que el translateX pero en el eje y),translate(medida eje x,medida eje y)(es un atajo para declarar ambas funciones en una),scale(medida a escala,1 es el tamano normal,2 es el doble,0.5 es la mitad,etc)(sirve para escalar el elemento),scaleX(igual que scale pero solo en el eje x),scaleY(igual que scale pero en el eje y),skew(tantos grados,ejemplo:30deg)(sirve para deformar un elemento en la direccion de los grados establecidos, para que el contendido no se deforme se le debe agregar a este la misma propiedad con la misma cantidad en grados pero negativa para que se equilibre),click-path: forma (medidas)(sirve para darle una forma especifica al elemento para esto sirve la pagina click path generator); para invertigar mas buscar w3schools transforms css.

background-image:url(enlace de imagen);sirve para colocar una imagen como fondo de una caja o elemento.

background-size: medida en x  medida en y;sirve para adaptar el tamano de la imagen del fondo, si se le coloca cover la imagen se ajusta un poco mejor(solo un poco).

background-repeat:repeat(sirve para que la imagen se repita si no cumple con las mismas caracteristicas de su contenedor, valor por defecto),no-repeat(sirve para que la imagen no se repita, y donde se repetia se rellena con el color de fondo establecido en el elemento);sirve para definir si la imagen se repite o no.

background-clip:border-box(sirve para que la imagen se muestre a partir de los bordes de la caja, valor por defecto), padding-box(se empieza a mostrar la imagen desde el padding),content-box(muestra la imagen desde el espacio permitido despues del borde y del padding); sirve para definir desde que parte de la caja se va a empezar a mostrar la imagen, recortandola.

background-origin:hace lo mismo que background-clip, pero sin recortar la imagen, ya que la empieza a generar a partir del lugar indicado.

background-position: un lado horizontal  un lado vertical; sirve para posicionar la imagen combinando dos lados.

background-attachment:scroll(no estoy seguro, la imagen se mantiene igual aunque scrollees),fixed(la imagen se mueve conforme se scrollea);

Variables: 

Para declarar: 
root{
    --nombre de la variable:valor;        
} Tambien se puede crear dentro de los atributos de un elemento para que sea una variable local, ya que usando el root es una global.

Para utilizarla:

Atributo:var(nombre de la variable);

Filter:Todas las siguientes funciones van dentro del atributo filter.

blur(medida);sirve para definir el desenfoque de una imagen).

brightness(numero del 0 al 1,para los brillos normales y numeros mas altos para brillos mas exagerados);sirve para definir el brillo de una imagen).

contrast:(numero, el 0 es sin contraste y el 1 es el contraste normal pero se puede aumentar);sirve para definir el contraste para una imagen.

drop-shadow(medida medida medida color);sirve para darle una sombra a las imagenes con partes transparentes, proporciona un efecto mejor que el de box-shadow, se puede pegar varias veces la funcion para aumentar el efecto.

gray-scale(porcentajes); sirve para cambiar el color mediante la escala de grises.

hue-rotate(tantos grados, ejemplo: 15deg);sirve para invertir la gama de colores(cambiando los colores totalmente).

invert(porcentajes);sirve para invertir los colores propios de la imagen,con el 100% se pone el opuesto de cada color y con el 50% queda todo gris porque es la mitad del cambio.

opacity(numero del 0 al 1); sirve para modificar el grado de opacidad.

saturate(porcentajes, puede pasar el 100%); sirve para modificar la saturacion, es muy parecido al contraste.

sepia(numero de 0 al 1); sirve para convertir el color en sepia(ni idea de que es eso).

url();investigar.

direction: ltr(left to right, valor por defecto),rtl(right to left); sirve para cambiar la direccion en como se lle un texto.

letter-spacing:medida; sirve para modificar el espacio que hay entre las letras.

scroll-behavior:smooth(hace que el scrolleo sea suave cuando una caja a nos lleva a otra parte de la pagina);.

user-selected:none(hace que el usuario no pueda seleccionar lo que hay en la pagina);.










































